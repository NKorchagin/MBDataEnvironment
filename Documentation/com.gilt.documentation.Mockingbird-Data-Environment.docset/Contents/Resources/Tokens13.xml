<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/MBMLCollectionFunctions.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/MBMLCollectionFunctions</TokenIdentifier>
			<Abstract type="html">A class containing implementations for MBML functions that perform common
operations on collections such as NSArray, NSSet and NSDictionary
objects.</Abstract>
			<DeclaredIn>MBMLCollectionFunctions.h</DeclaredIn>
            
			
			<NodeRef refid="13"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLCollectionFunctions/isCollection:</TokenIdentifier>
			<Abstract type="html">An MBML function implementation that determines whether a given value is
a collection. A collection is an object that&apos;s an instance of NSSet,
NSArray or NSDictionary.</Abstract>
			<DeclaredIn>MBMLCollectionFunctions.h</DeclaredIn>
			
			<Declaration>+ (NSNumber *)isCollection:(id)param</Declaration>
			<Parameters>
				<Parameter>
					<Name>param</Name>
					<Abstract type="html">The function&apos;s input parameter.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A boolean result, contained in an NSNumber.</Abstract></ReturnValue>
			<Anchor>//api/name/isCollection:</Anchor>
            <NodeRef refid="13"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLCollectionFunctions/isSet:</TokenIdentifier>
			<Abstract type="html">An MBML function implementation that determines whether a given value is
an instance of NSSet.</Abstract>
			<DeclaredIn>MBMLCollectionFunctions.h</DeclaredIn>
			
			<Declaration>+ (NSNumber *)isSet:(id)param</Declaration>
			<Parameters>
				<Parameter>
					<Name>param</Name>
					<Abstract type="html">The function&apos;s input parameter.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A boolean result, contained in an NSNumber.</Abstract></ReturnValue>
			<Anchor>//api/name/isSet:</Anchor>
            <NodeRef refid="13"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLCollectionFunctions/isDictionary:</TokenIdentifier>
			<Abstract type="html">An MBML function implementation that determines whether a given value is
an instance of NSSet.</Abstract>
			<DeclaredIn>MBMLCollectionFunctions.h</DeclaredIn>
			
			<Declaration>+ (NSNumber *)isDictionary:(id)param</Declaration>
			<Parameters>
				<Parameter>
					<Name>param</Name>
					<Abstract type="html">The function&apos;s input parameter.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A boolean result, contained in an NSNumber.</Abstract></ReturnValue>
			<Anchor>//api/name/isDictionary:</Anchor>
            <NodeRef refid="13"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLCollectionFunctions/isArray:</TokenIdentifier>
			<Abstract type="html">An MBML function implementation that determines whether a given value is
an instance of NSSet.</Abstract>
			<DeclaredIn>MBMLCollectionFunctions.h</DeclaredIn>
			
			<Declaration>+ (NSNumber *)isArray:(id)param</Declaration>
			<Parameters>
				<Parameter>
					<Name>param</Name>
					<Abstract type="html">The function&apos;s input parameter.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A boolean result, contained in an NSNumber.</Abstract></ReturnValue>
			<Anchor>//api/name/isArray:</Anchor>
            <NodeRef refid="13"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLCollectionFunctions/count:</TokenIdentifier>
			<Abstract type="html">An MBML function implementation that returns the count of items in a
collection object.</Abstract>
			<DeclaredIn>MBMLCollectionFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)count:(id)param</Declaration>
			<Parameters>
				<Parameter>
					<Name>param</Name>
					<Abstract type="html">The function&apos;s input parameter.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A number containing the count of items in the input parameter.</Abstract></ReturnValue>
			<Anchor>//api/name/count:</Anchor>
            <NodeRef refid="13"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLCollectionFunctions/removeObject:</TokenIdentifier>
			<Abstract type="html">An MBML function implementation that removes all instances of one or more
objects from an array and returns the resulting array.</Abstract>
			<DeclaredIn>MBMLCollectionFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)removeObject:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An array containing the items in the input array, with the
            specified items removed.</Abstract></ReturnValue>
			<Anchor>//api/name/removeObject:</Anchor>
            <NodeRef refid="13"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLCollectionFunctions/removeObjectAtIndex:</TokenIdentifier>
			<Abstract type="html">An MBML function implementation that removes an object at a given index from
an array and returns the resulting array.</Abstract>
			<DeclaredIn>MBMLCollectionFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)removeObjectAtIndex:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An array containing the items in the input array, with the
            specified item removed.</Abstract></ReturnValue>
			<Anchor>//api/name/removeObjectAtIndex:</Anchor>
            <NodeRef refid="13"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLCollectionFunctions/appendObject:</TokenIdentifier>
			<Abstract type="html">An MBML function implementation that adds one or more items to the end of
an existing array and returns the resulting array.</Abstract>
			<DeclaredIn>MBMLCollectionFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)appendObject:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An array containing the items in the input array, with the
            specified item(s) appended.</Abstract></ReturnValue>
			<Anchor>//api/name/appendObject:</Anchor>
            <NodeRef refid="13"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLCollectionFunctions/insertObjectAtIndex:</TokenIdentifier>
			<Abstract type="html">An MBML function implementation that inserts an item into an array and returns
the resulting array.</Abstract>
			<DeclaredIn>MBMLCollectionFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)insertObjectAtIndex:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An array containing the items in the input array, with the
            specified item inserted at the given index.</Abstract></ReturnValue>
			<Anchor>//api/name/insertObjectAtIndex:</Anchor>
            <NodeRef refid="13"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLCollectionFunctions/array:</TokenIdentifier>
			<Abstract type="html">An MBML function implementation that returns an NSArray containing the
value of each input parameter expression as an array element.</Abstract>
			<DeclaredIn>MBMLCollectionFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)array:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An array containing the value of each input parameter expression.</Abstract></ReturnValue>
			<Anchor>//api/name/array:</Anchor>
            <NodeRef refid="13"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLCollectionFunctions/set:</TokenIdentifier>
			<Abstract type="html">An MBML function implementation that returns an NSSet containing the
value of each input parameter expression as set elements.</Abstract>
			<DeclaredIn>MBMLCollectionFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)set:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A set containing the value of each input parameter expression.</Abstract></ReturnValue>
			<Anchor>//api/name/set:</Anchor>
            <NodeRef refid="13"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLCollectionFunctions/setContains:</TokenIdentifier>
			<Abstract type="html">An MBML function implementation that determines whether a set contains a
given object.</Abstract>
			<DeclaredIn>MBMLCollectionFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)setContains:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSNumber containing a boolean value indicating the result
            of the function.</Abstract></ReturnValue>
			<Anchor>//api/name/setContains:</Anchor>
            <NodeRef refid="13"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLCollectionFunctions/dictionary:</TokenIdentifier>
			<Abstract type="html">An MBML function implementation that returns an NSDictionary containing the
items provided as keys and values.</Abstract>
			<DeclaredIn>MBMLCollectionFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)dictionary:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A dictionary containing the specified key/value pairs.</Abstract></ReturnValue>
			<Anchor>//api/name/dictionary:</Anchor>
            <NodeRef refid="13"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLCollectionFunctions/keys:</TokenIdentifier>
			<Abstract type="html">An MBML function implementation that returns an array containing the keys of
an NSDictionary.</Abstract>
			<DeclaredIn>MBMLCollectionFunctions.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/clm/MBMLCollectionFunctions/values:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (id)keys:(NSDictionary *)dict</Declaration>
			<Parameters>
				<Parameter>
					<Name>dict</Name>
					<Abstract type="html">The function&apos;s input parameter, which is expected to
            be a dictionary.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An array containing the passed-in dictionary&apos;s keys.</Abstract></ReturnValue>
			<Anchor>//api/name/keys:</Anchor>
            <NodeRef refid="13"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLCollectionFunctions/values:</TokenIdentifier>
			<Abstract type="html">An MBML function implementation that returns an array containing the values of
an NSDictionary.</Abstract>
			<DeclaredIn>MBMLCollectionFunctions.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/clm/MBMLCollectionFunctions/keys:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (id)values:(NSDictionary *)dict</Declaration>
			<Parameters>
				<Parameter>
					<Name>dict</Name>
					<Abstract type="html">The function&apos;s input parameter, which is expected to
            be a dictionary.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An array containing the passed-in dictionary&apos;s values.</Abstract></ReturnValue>
			<Anchor>//api/name/values:</Anchor>
            <NodeRef refid="13"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLCollectionFunctions/removeLastObject:</TokenIdentifier>
			<Abstract type="html">An MBML function implementation that removes the last object in an array
and returns the resulting array.</Abstract>
			<DeclaredIn>MBMLCollectionFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)removeLastObject:(id)input</Declaration>
			<Parameters>
				<Parameter>
					<Name>array</Name>
					<Abstract type="html">The function&apos;s input parameter, which is expected to
            be an array.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A copy of the input array, with the last item removed.</Abstract></ReturnValue>
			<Anchor>//api/name/removeLastObject:</Anchor>
            <NodeRef refid="13"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLCollectionFunctions/lastObject:</TokenIdentifier>
			<Abstract type="html">An MBML function implementation that returns the last object in an array.</Abstract>
			<DeclaredIn>MBMLCollectionFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)lastObject:(id)array</Declaration>
			<Parameters>
				<Parameter>
					<Name>array</Name>
					<Abstract type="html">The function&apos;s input parameter, which is expected to
            be an array.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The last item in the input array.</Abstract></ReturnValue>
			<Anchor>//api/name/lastObject:</Anchor>
            <NodeRef refid="13"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLCollectionFunctions/indexOf:</TokenIdentifier>
			<Abstract type="html">An MBML function implementation that determines the index of a specified value
within an array, or -1 if the value is not found.</Abstract>
			<DeclaredIn>MBMLCollectionFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)indexOf:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">an array containing the input parameters for the function</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A number indicating the zero-based index of the value in the array.
            If the value does not exist in the array, -1 is returned.</Abstract></ReturnValue>
			<Anchor>//api/name/indexOf:</Anchor>
            <NodeRef refid="13"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLCollectionFunctions/copyOf:</TokenIdentifier>
			<Abstract type="html">An MBML function implementation that returns a copy of an object adopting
the NSCopying protocol.</Abstract>
			<DeclaredIn>MBMLCollectionFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)copyOf:(id)param</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A copy of the object yielded by the input parameter expression.</Abstract></ReturnValue>
			<Anchor>//api/name/copyOf:</Anchor>
            <NodeRef refid="13"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLCollectionFunctions/mutableCopyOf:</TokenIdentifier>
			<Abstract type="html">An MBML function implementation that returns a mutable copy of an object
adopting the NSMutableCopying protocol.</Abstract>
			<DeclaredIn>MBMLCollectionFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)mutableCopyOf:(id)param</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A mutable copy of the object yielded by the input parameter
            expression.</Abstract></ReturnValue>
			<Anchor>//api/name/mutableCopyOf:</Anchor>
            <NodeRef refid="13"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLCollectionFunctions/getValueForKey:</TokenIdentifier>
			<Abstract type="html">An MBML function implementation that uses key-value coding to retrieve a
value from an object.</Abstract>
			<DeclaredIn>MBMLCollectionFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)getValueForKey:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The value for the given key. If the key does not have an associated
            value, the default value (if it was provided) or nil (if no
            default was provided) is returned.</Abstract></ReturnValue>
			<Anchor>//api/name/getValueForKey:</Anchor>
            <NodeRef refid="13"/>
		</Token>
		
        
	</File>
</Tokens>