<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/MBMLDataProcessingFunctions.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/MBMLDataProcessingFunctions</TokenIdentifier>
			<Abstract type="html">Provides a mechanism for manipulating data structures from within the template
language.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
            
			
			<NodeRef refid="14"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/containsValue:</TokenIdentifier>
			<Abstract type="html">Determines whether any of the values contained within one or more container
objects equals a specified value.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)containsValue:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">an array containing the input parameters for the function</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An &lt;code&gt;NSNumber&lt;/code&gt; instance containing either the boolean
            value &lt;code&gt;YES&lt;/code&gt; if any of the input parameters contains the specified
            element, or &lt;code&gt;NO&lt;/code&gt; otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/containsValue:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/collectionPassesTest:</TokenIdentifier>
			<Abstract type="html">Applies a template expression accross each member of the passed collection and returns
whether or not all members passed the test (particularly useful for form validation).</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)collectionPassesTest:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">an array or dictionary containing the input parameters for the function</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An &lt;code&gt;NSNumber&lt;/code&gt; instance containing either the boolean
            value &lt;code&gt;YES&lt;/code&gt; if all of the input collections pass the 
            specified template expression, or &lt;code&gt;NO&lt;/code&gt; otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/collectionPassesTest:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/valuesPassingTest:</TokenIdentifier>
			<Abstract type="html">Tests a boolean expression against the values in one or more container objects,
and returns an array of values for which the test expression is true.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)valuesPassingTest:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">an array containing the input parameters for the
            function.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An array containing the values in the container objects
            for which the test expression evaluates to true</Abstract></ReturnValue>
			<Anchor>//api/name/valuesPassingTest:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/valuesIntersect:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)valuesIntersect:(NSArray *)params</Declaration>
			
			
			<Anchor>//api/name/valuesIntersect:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/join:</TokenIdentifier>
			<Abstract type="html">Creates a string by concatenating the string values of the elements
in one or more container objects, using the specified separator
string between each value in the returned string.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)join:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">an array containing the input parameters for the
            function.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">a string containing the string values of the items in the
            &lt;i&gt;container objects&lt;/i&gt;, separated by the string specified
            as the &lt;i&gt;separator string&lt;/i&gt;</Abstract></ReturnValue>
			<Anchor>//api/name/join:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/split:</TokenIdentifier>
			<Abstract type="html">Creates an array by splitting a string on a given delimeter.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)split:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">an array containing the input parameters for the
            function.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">an array containing the components of the split string</Abstract></ReturnValue>
			<Anchor>//api/name/split:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/splitLines:</TokenIdentifier>
			<Abstract type="html">Creates an array by splitting a string on newline characters (as determined
by the &lt;code&gt;[NSCharacterSet newlineCharacterSet]&lt;/code&gt; method).</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)splitLines:(NSString *)stringToSplit</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">an array containing the input parameters for the
function.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">an array containing the components of the split string</Abstract></ReturnValue>
			<Anchor>//api/name/splitLines:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/appendArrays:</TokenIdentifier>
			<Abstract type="html">Returns a single array containing all the elements in the arrays specified
in the input parameters.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)appendArrays:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">an array containing the input parameters for the
            function.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">an array containing all of the elements in the arrays referenced
            by the passed-in expression parameters.</Abstract></ReturnValue>
			<Anchor>//api/name/appendArrays:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/flattenArrays:</TokenIdentifier>
			<Abstract type="html">Returns a single array containing all the elements of the array(s) specified
in the parameters, wherein any element that is an array will be flattened
such that the returned array contains no nested arrays. This does a
depth-first traversal of the input parameters.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)flattenArrays:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">an array containing the input parameters for the
            function.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">the flattened array.</Abstract></ReturnValue>
			<Anchor>//api/name/flattenArrays:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/filter:</TokenIdentifier>
			<Abstract type="html">Filters a collection object by applying a test expression to the contents
of each object in the collection. Each top-level object in the collection
where the test expression evaluates to true according to the rules of
the filter behavior is returned.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)filter:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">an array containing the function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">an array or dictionary containing the filtered items. The type of
            the object returned will match the &lt;i&gt;data model&lt;/i&gt; input
            parameter.</Abstract></ReturnValue>
			<Anchor>//api/name/filter:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/pruneMatchingLeaves:</TokenIdentifier>
			<Abstract type="html">Traverses an array-based tree structure, removing any leaves whose values
match a given test expression. The resulting pruned tree is then returned.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)pruneMatchingLeaves:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">an array containing the function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">an array containing the result of the operation.</Abstract></ReturnValue>
			<Anchor>//api/name/pruneMatchingLeaves:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/pruneNonmatchingLeaves:</TokenIdentifier>
			<Abstract type="html">Traverses an array-based tree structure, removing any leaves whose values
do not match a given test expression. The resulting pruned tree is then
returned.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)pruneNonmatchingLeaves:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">an array containing the function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">an array containing the result of the operation.</Abstract></ReturnValue>
			<Anchor>//api/name/pruneNonmatchingLeaves:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/list:</TokenIdentifier>
			<Abstract type="html">Iterates over (and potentially recurses into) the items in a container object,
and returns a list of values. The values in the returned list will reflect the
ordering of any arrays iterated, however iterating dictionaries will result in
non-deterministic ordering.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)list:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">an array containing the function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">an array containing the listed items.</Abstract></ReturnValue>
			<Anchor>//api/name/list:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/map:</TokenIdentifier>
			<Abstract type="html">Creates a mapping of keys to values by iterating over (and potentially
recursing into) a container object holding an arbitrary data model.
The keys and values of the returned dictionary are constructed based
on expressions passed to the function.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/mapToSingleValue:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (id)map:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">an array containing the function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">a dictionary containing the mapped items.
  </Abstract></ReturnValue>
			<Anchor>//api/name/map:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/mapToSingleValue:</TokenIdentifier>
			<Abstract type="html">Creates a mapping of keys to values by iterating over (and potentially
recursing into) a container object holding an arbitrary data model.
The keys and values of the returned dictionary are constructed based
on expressions passed to the function.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/mapToSingleValue:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (id)mapToSingleValue:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">an array containing the function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">a dictionary containing the mapped items.</Abstract></ReturnValue>
			<Anchor>//api/name/mapToSingleValue:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/mapToArray:</TokenIdentifier>
			<Abstract type="html">Creates a mapping of keys to values by iterating over (and potentially
recursing into) a container object holding an arbitrary data model.
The keys and values of the returned dictionary are constructed based
on expressions passed to the function.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/mapToSingleValue:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (id)mapToArray:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">an array containing the function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">a dictionary containing the mapped items.</Abstract></ReturnValue>
			<Anchor>//api/name/mapToArray:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/sort:</TokenIdentifier>
			<Abstract type="html">Sorts a data structure based on the value of an expression.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)sort:(NSArray *)params</Declaration>
			
			
			<Anchor>//api/name/sort:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/merge:</TokenIdentifier>
			<Abstract type="html">Merges a set of dictionaries into a single dictionary.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)merge:(NSArray *)params</Declaration>
			
			
			<Anchor>//api/name/merge:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/unique:</TokenIdentifier>
			<Abstract type="html">Iterates over the values supplied by the passed-in enumerator, and returns an
array containing the unique values encountered.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)unique:(NSObject&lt;NSFastEnumeration&gt; *)enumerator</Declaration>
			<Parameters>
				<Parameter>
					<Name>enumerator</Name>
					<Abstract type="html">the function&apos;s input parameter.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">a set containing the unique values in the input parameter.</Abstract></ReturnValue>
			<Anchor>//api/name/unique:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/distributeArrayElements:</TokenIdentifier>
			<Abstract type="html">Distributes the elements in a single array across multiple arrays.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)distributeArrayElements:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">the function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">an array containing &lt;i&gt;returned array count&lt;/i&gt; arrays, each
            containing the distributed elements from &lt;i&gt;source array&lt;/i&gt;.</Abstract></ReturnValue>
			<Anchor>//api/name/distributeArrayElements:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/groupArrayElements:</TokenIdentifier>
			<Abstract type="html">Groups the elements in a single array into multiple arrays.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)groupArrayElements:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">the function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">an array containing one or more &lt;i&gt;group arrays&lt;/i&gt;.</Abstract></ReturnValue>
			<Anchor>//api/name/groupArrayElements:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/reduce:</TokenIdentifier>
			<Abstract type="html">Reduce an array of items into a single item.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)reduce:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">the function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">a single value.</Abstract></ReturnValue>
			<Anchor>//api/name/reduce:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
        
	</File>
</Tokens>